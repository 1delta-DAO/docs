[{"url":"./","title":"Introduction","level":"1.1","keywords":[],"body":"Welcome to the 1delta Docs! 1delta is a decentralized margin aggregator service that allows users to directly build margin positions using established DEXs and lending protocols. Our objective is to bring a universal aggregator service (comparable to Interactive Brokers in CeFi) to EVMs. Unbound by our own liquidity, we do not have the same limitations that comparable decentralized aggregators experience. Our goal is to partner with and aggregate established protocols in the space and not to directly compete against them. At the moment, crypto traders are limited in the options they have for building leverage while trading. If they choose to use money market protocols for building margin positions they will face a multi-step process that spans multiple dApps, is error-prone, and has low visibility. Existing aggregator/derivatives platforms have been the go-to solution for leveraged trading, however, they come with a steep tradeoff. While centralized players like FTX have failed users by misusing their funds, decentralized platforms like dYdX or GMX are required to provide both lending and trading liquidity often resulting in poor trading performance. Our vision is to bring fully-featured, decentralized aggregator services to EVMs. This includes Single-click margin trading (opening, closing positions, debt- and collateral swaps) Connecting established DEXs with established lending protocols to allow our users to access top-notch trading performance and highly competitive deposit and borrow rates Seamless UX and visibility - easy risk management through risk parameter displays and single-click self-liquidations Full transparency - Users hold the lending protocol balances themselves and can always see and access their raw balances with the lender Lending protocols have been less accessible to traders who are looking for a fully-featured aggregator. With 1delta, we hope to open the door for these traders to take advantage of the strong liquidity and attractive rates on large lending protocols without sacrificing the tools they have come to expect while trading.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-08-24 16:39:06 "},{"url":"margin-aggregation.html","title":"Margin Aggregation","level":"1.2","keywords":[],"body":"Margin Aggregation Margin Trading In Crypto Margin trading for cryptocurrencies is a financial strategy that enables investors to trade digital assets like Bitcoin, Ethereum, and other altcoins using borrowed funds from a broker or exchange. This approach allows traders to increase their purchasing power and enhance their profit potential by leveraging their existing capital. However, it's essential to remember that margin trading also entails higher risks and can lead to significant losses if the market moves against the trader's position. In cryptocurrency margin trading, investors can access leverage, which is essentially a multiplier that amplifies the trader's capital. For example, if a trader uses 5x leverage, a $1,000 investment would provide them with $5,000 worth of purchasing power in the market. This increased exposure can lead to substantial gains if the market moves in their favor, but it can also magnify losses if the market goes against them. To engage in margin trading, traders are required to deposit an initial margin (or collateral) into a lending protocol. This collateral serves as a guarantee for the borrowed funds and is calculated as a percentage of the total position value. Different lenders may have different margin requirements, and traders should be aware of the specific policies of their chosen platform. When margin trading cryptocurrencies, it's crucial to understand the concept of liquidation. Liquidation occurs when the market moves against a trader's position to the point where their collateral is no longer sufficient to cover their losses. Lenders usually measure this using the health factor. In such a case, the health factor drops below 1 and the wallet will be flagged for liquidation, allowing another actor to close part of the position to recover the borrowed funds. In summary, margin trading for cryptocurrencies is a high-risk, high-reward trading strategy that can lead to significant profits or losses, depending on market movements. It's best suited for experienced traders who have a solid understanding of market dynamics and can effectively manage risk. Margin Trading In DeFi To open margin positions, users can manually loop through the following steps if they want to open an ETH-long position with 4x leverage. Supply initial collateral in ETH worth $1,000 Borrow $800 worth of USDC (80% of %1,000) Swap to ETH and supply again - This will give us another $640 (80% of $800) in borrowing capacity. We will now repeat this cycle until we obtained our target leverage. Borrow $640 (80% of $800), swap an supply Borrow $512 (80% of $640), swap an supply Borrow $409.6 (80% of $512), swap an supply Borrow $327.68 (80% of$409.6), swap an supply Borrow $262.144 (80% of$327.68), swap an supply Borrow $48.576 (the remaining amount to bring the total borrowed funds to $3,000) We see that building this leverage takes 22 transactions to complete as each sub-step in step 3. consists of 3 separate transactions. The following chart summarizes the general procedure. 1) A first USDT deposit is required for taking out a loan; 2) we can borrow WBTC to our wallet; 3) we swap WBTC to USDT on a DEX; 4) we deposit USDT to the lender; we repeat from step 2) until we reach the desired position size. Certainly, this cannot be the long-term solution to DeFi margin trading. 1delta uses unique methods and implementations that allow opening such positions in a maximum of 2 transactions, where the first one is just the initial supply of the collateral. How 1delta Automates The Flow We illustrate the example above using the 1delta protocol. Supply initial collateral in ETH worth $1,000 We use a flash swap and receive $3,000 of ETH and supply We supply the obtained ETH We can now borrow 80% of the $4,000 ($3,200) in USDC the we supplied, we borrow $3,000 We repay the swap pool with the obtained $3,000 in USDC All sub-steps in step 2. happen within the same transaction. As such, there is no more manual looping when trying to build a leveraged position when using lending protocols. The following chart summarizes the interactions with the lender. Illustration of a swap router architecture that can open positions (borrow and supply) with flash swaps or flash loans in only two steps. © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-11-10 14:14:21 "},{"url":"guide/overview.html","title":"Guide","level":"1.3","keywords":[],"body":"How To Use 1delta 1delta has a unique approach to margin trading. Our initial version combines the simplicity of a lending protocol interface with well versed swap interfaces that will help you with building any position with the lender. Selecting a Trade To be able to trade on margin, similar to most brokers, you have to deposit collateral first. This can be done through multiple channels - You can either do it directly with the lender (by using their own UI), or just click the \"Deposit\" button in the main panel. If you already have collateral with the lender, this step is skipped. The following overview illustrates the configurations you can set up with the main trade panel. The selections map to the trade types as follows. Single Collateral Position: Swap and deposit or withdraw and swap. Single Debt Position: Borrow and swap or swap and repay. Two Collateral Positions: Swap collateral positions. Two Debt Positions: Swap debt positions. One Collateral and one Debt Positions: Open a margin position (Borrow, swap and supply) or close one (withdraw collateral, swap and repay debt) Lender-Dependent Mechanics Dependent on which lender you want to trade with, the mechanics can vary With Delegation (Aave, Compound V3) Using Abstract Accounts (Compound V2) © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-08-22 09:44:43 "},{"url":"guide/delegation.html","title":"Borrow Delegation","level":"1.3.1","keywords":[],"body":"How to use 1delta's margin aggregator In this guide, we will outline the process of utilizing the 1delta margin trading implementation to manage lending positions within the AAVE lending protocol. Deposit / Withdraw / Borrow / Repay First-off, we support all basic lending interactions. These can be triggered in multiple ways. Through the main panel (only of you have no deposits) Using the tables undernath the chart with the \"My Wallet\" or \"Markets\" tabs Clicking the button will trigger a quick action panel that allows you to execute any transaction that you could execute with a lending protocol. The quick action panel allows you to execute all direct transactions with the lenders. The left hand side shows the general view, whereas the right hand side shows a configuration where the trader wants to execute a swap before depositing. On input, the bottom of the panel shows a post-transaction indication. The top button row allows you to pick the transactions while the currency dropdowns allow you to pick the currencies for the interaction. In the quick action panel, your wallet balance is always shown at the top, indicated by the wallet icon. If an additional transaction is required before the transfer, the UI will instruct you to either approve spending (in case of deposits, withdrawals and repayments) or approve borrow delegation. After execution, you will see your balance in the \"positions\"-tab in the table: The amount deposited will be display once the deposit transaction is confirmed. Open a margin position With collateral in place, we can now proceed to open a margin position by selecting a borrow currency at the top and a the collateral currency at the bottom. You also have to make sure that the \"open\" option is selected at the top. In our example, we want to sell the maximum amount MWNT possible given our collateral. This value is auto-selected when clicking on the MAX button. As a collateral, we select the currency that we deposited, USDC. The Account panel on the left hand side allows you to simulate the trade on your position by enabling the \"Simulation\" switch at the bottom. On the left hand side, the account panel simulates the user position post-trade. For the given trade on the right hand side, the APR rises by 103 percentage points, the assets and debt rise by about $17.50 and our leverage shoots up to 4.83x. A value can be typed into either panel. After entering a value, a trade will be calculated that leads to the best price. The button will be inactive if you are not allowed to execute the trade (e.g. if your selected trade is too large). Otherwise, a click on the button will trigger your wallet to approve the trade. If any sort of approval is required, the UI will show an approval button instead. Just approve the respective spending or delegation to be able to proceed with the trade. The balanes in the \"Positions\" tab swiftly update and we can see the result after executing the trade selected above: A borrow position with a lender is flagges as a \"Short\" position in 1delta, whereas collateral positions are \"Long\" positions. Swap debt or collateral With 1delta, we can effortlessly exchange our debt or collateral positions in just a single click. The \"Swap\"-option in the main panel enables a sub-selection with \"Collateral\" and \"Debt\" option. Collateral: Executing a collateral swap - a transactions where you can withdraw the top currency, swap it to the bottom currency and deposit it directly. An execution requires you to own the withdrawal currency, meaning that you can only execute a trade where the top amount is lower or equal your existing collateral No restrictions apply to the bottom panel Debt: Executing a debt swap - a transaction that borrows the top currency, swaps it to the bottom one and directly repays it. An execution requires you to hold a debt position in the bottom currency. No restriction to the top currency applies *Collateral- and debt swaps allow you to easily change your exposure in a single trade. In this screenshot, we see the 4.57 USDC obtained after a swap from 10 MNT. Closing a margin position Closing a position (withdraw, swap an repay) is similarly easy. The \"Close\" tab in top button row allows you to execute the following three interactions in one transaction: Withdraw one of your collaterals Trade the currency against another one Repay an outstanding loan You can either pick the maximum collateral amount to withdraw or the maximum debt amount to repay. Our implementation makes sure that no borrow dust will be left. Closing a position allows you to repay a debt position with ease. The simulations on the left hand side shows that our leverage and APR come down to the levels before the position was opened.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-11-10 14:49:38 "},{"url":"guide/abstract-accounts.html","title":"Abstract Accounts","level":"1.3.2","keywords":[],"body":"How to create and use 1delta abstract accounts We will describe how to use 1delta to trade on top of a lending protocol. Create an account To begin trading, you will need to create a 1Delta account. The account provides you with flexibility, control and is very cheap to create — only minor gas fees are incurred. Deposit collateral Once the account is created, you can deposit funds to the lending protocol. If you do not currently own the token you want to deposit, you can also swap and then supply in the same transaction using a Uniswap-style interface: Open a margin position - Borrow, Swap and Supply in a single Click It is now time to trade on margin. With your deposited collateral you can now use the full capacity of your borrowing power. The following screenshot shows an indication of a position increase where WETH is borrowed and sold for USDC - which is directly deposited. All the relevant risk parameters are shown, in the scenario, the user sees a warning that the account will get close to liquidation after execution. Close a margin position - Withdraw, Swap and Repay in a single Click If our health factor gets very low, the manual withdraw-swap-repay cycle would lead to a significant hassle when trying to unwind the position, all while 1Delta executes the interactions in a single transaction: Our health factor is immediately restored if we trim the full position by selecting the maximum output amount on the right hand side. The dApp will also make sure that there is no dust left. We can see that the health factor jumps up and the LTV drops to zero. On top of that, 1delta's implementation prevents dust if you pick the maximum amount for closing a position.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-27 15:38:06 "},{"url":"architecture/overview.html","title":"Architecture","level":"1.4","keywords":[],"body":"How is 1delta Built? Generally, lending protocols fall into two categories when trying to compose trades with them. First, we have protocols that allow a user to delegate borrows and withdrawals. This means that a user can approve that another contract can borrow using their collateral or withdraw collateral from their balances directly. This is very similar to the conventional ERC20 approval mechanism that allows this exact mechanic for regular transfers. This architecture allows an external contract to aggregate the position on the user's behalf - meaning that the contract can directly operate on the user's balance. Compound V3, Venus.io and AAVE V3 are protocols in this category. On the other hand, we have protocols that do not allow this type of delegation. In this case, users can create abstract account that will build the positions on their behalf. These abstract accounts are smart contracts that can only be operated by the user that created them. Compound V2 and most forks fall into this category. Delegation Architecture Abstract Account Architecture © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-08-21 15:07:50 "},{"url":"architecture/delegation.html","title":"Borrow Delegation","level":"1.4.1","keywords":[],"body":"Delegation Structure The architecture for protocols that allow delegated borrowing and withdrawals is provided as follows. In a first step, the user has to approve that the \"Broker contract\" can interact on their behalf. This has to be done if the user wants to execute transactions that include borrowing or withdrawals. If this is done, the contract can be handled similar to a Uniswap-type swap router. © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-27 15:38:06 "},{"url":"architecture/abstract-account.html","title":"Abstract Accounts","level":"1.4.2","keywords":[],"body":"Architecture Using Abstract Accounts First of all, users have to create an abstract account using our factory contract. Once the account is created, the user can then interact though it in a very similar manner to the brokerage contract, except that they are rather self-brokering. © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-27 15:38:06 "},{"url":"lenders/summary.html","title":"Lenders","level":"1.5","keywords":[],"body":"Lenders The following subsections describe the lenders and their specific parameters. Metrics© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-08-21 14:33:17 "},{"url":"lenders/metrics.html","title":"Metrics","level":"1.5.1","keywords":[],"body":"Lending Metrics General Parameters Collateral c: The $ amount of deposits a trader owns Debt d: The $ amount borrowed from the lender Collateral factor cF: Determines how much borrow capacity a trader has when depositing an asset. Also described as Liquidation Threshold Discounted Collateral: dC = sum of cF*(deposits in asset) for all assets Borrow Capacity bC=dC-d: The $ amount a trader can borrow Account Liquidation Threshold: lT=dC/c Risk Metrics Health Factor: hF=dC/d, if lower than 1, the account can be liquidated LTV: ltv=c/d Derived Values Max Leverage in pair: l=1/(1-cfBuy); cfBuy = collateralFactor of Buy Asset Max Open Size for pair: mO=bC*l=bC(1-cfBuy); cfBuy = collateralFactor of Buy Asset Liquidation Price (ideally for assets paired with stablecoins, otherwise, one of the respective assets is assumed to have a constant price and _USD-values are replaced with raw balances): Long: lP=sell_USD/(buy*cFBuy); sell_USDC=sell/borrow asset amount in USD; buy=purchase amount denominated in collateral/buy currency Short: lP=buy_USD*cfBuy/sell; buy_USDC=buy/deposit asset amount in USD; sell=sell/borrow asset amount in sell currency© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-08-24 16:22:49 "},{"url":"api/summary.html","title":"Contract API","level":"1.6","keywords":[],"body":"Contract Interfaces The following subsections describe the smart contract api for both the brokerage/aggregation contract as well as for abstract account contracts. Money Market Borrow Swap Collateral Swap Open Margin Position Close Margin Position© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-27 15:38:06 "},{"url":"api/money-market.html","title":"Money Market","level":"1.6.1","keywords":[],"body":"Money Market Functions Functions that allow a swap aggreagated with a single money market interactions. Supplying to a lender Supply functions connected with swaps. Function: swapAndSupplyExactIn This function allows the user to swap a specified amount of input tokens (tokenIn) and supply the resulting output tokens to a lending protocol. Parameters: params (ExactInputMultiParams memory): A struct containing parameters for the swap and supply operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be swapped. No return values Function: swapETHAndSupplyExactIn This function allows the user to swap a specified amount of Ether for output tokens and supply the resulting tokens to a lending protocol. Parameters: params (ExactInputMultiParams calldata): A struct containing parameters for the swap and supply operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of Ether to be swapped. No return values Function: swapAndSupplyExactOut This function allows the user to swap tokens to receive a specified amount of output tokens (tokenOut) and supply the resulting tokens to a lending protocol. Parameters: params (MarginSwapParamsMultiExactOut calldata): A struct containing parameters for the swap and supply operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. -interestRateMode` (uint256`): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be used. Returns: uint256: The amount of input tokens used for the swap. Function: swapETHAndSupplyExactOut This function allows the user to swap Ether to receive a specified amount of output tokens (tokenOut) and supply the resulting tokens to a lending protocol. Parameters: params (ExactOutputMultiParams calldata): A struct containing parameters for the swap and supply operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. Returns: uint256: The amount of Ether used for the swap. Function: swapETHAndSupplyExactOut This function allows the user to swap Ether to receive a specified amount of output tokens (tokenOut) and supply the resulting tokens to a lending protocol. Parameters: params (ExactOutputMultiParams calldata): A struct containing parameters for the swap and supply operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. Returns: uint256: The amount of Ether used for the swap. Withdrawals from existing deposits Withdrawal functions connected with swaps Function: withdrawAndSwapExactIn This function allows the user to withdraw a specified amount of input tokens (tokenIn) from a lending protocol and swap them to receive output tokens. Parameters: params (ExactInputParams memory): A struct containing parameters for the withdrawal and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be withdrawn and swapped. Returns: uint256: The amount of output tokens received from the swap. Function: withdrawAndSwapExactInToETH This function allows the user to withdraw a specified amount of input tokens (tokenIn) from a lending protocol and swap them to receive Ether. Parameters: params (ExactInputMultiParams memory): A struct containing parameters for the withdrawal and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be withdrawn and swapped. Returns: uint256: The amount of Ether received from the swap. Function: withdrawAndSwapExactOut This function allows the user to withdraw input tokens (tokenIn) from a lending protocol and swap them to receive a specified amount of output tokens (tokenOut). Parameters: params (MarginSwapParamsMultiExactOut calldata): A struct containing parameters for the withdrawal and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be withdrawn. Returns: uint256: The amount of input tokens withdrawn for the swap. Function: withdrawAndSwapExactOutToETH This function allows the user to withdraw input tokens (tokenIn) from a lending protocol and swap them to receive a specified amount of Ether. Parameters: params (MarginSwapParamsMultiExactOut calldata): A struct containing parameters for the withdrawal and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of Ether to be received. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be withdrawn. Returns: uint256: The amount of input tokens withdrawn for the swap. Functions withdeawing the full balances Function: withdrawAndSwapAllIn This function allows the user to withdraw their entire balance of input tokens (tokenIn) from the lending protocol and swap them for output tokens (tokenOut). Parameters: params (AllInputCollateralMultiParamsBaseWithRecipient calldata): A struct containing parameters for the withdraw and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. recipient (address): The address that will receive the output tokens. amountOutMinimum (uint256): The minimum amount of output tokens that must be received. Returns: uint256: The amount of output tokens received from the swap. Function: withdrawAndSwapAllInToETH This function allows the user to withdraw their entire balance of input tokens (tokenIn) from the lending protocol and swap them for Ether. Parameters: params (AllInputCollateralMultiParamsBaseWithRecipient calldata): A struct containing parameters for the withdraw and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. recipient (address): The address that will receive the Ether. amountOutMinimum (uint256): The minimum amount of Ether that must be received. Returns: uint256: The amount of Ether received from the swap. Borrowing Function: borrowAndSwapExactIn This function allows the user to borrow a specified amount of input tokens (tokenIn) and swap them to receive output tokens. Parameters: interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. params (ExactInputWithLimitParams memory): A struct containing parameters for the borrow and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be borrowed and swapped. amountOutMinimum (uint256): The minimum amount of output tokens that must be received. Returns: uint256: The amount of output tokens received from the swap. Function: borrowAndSwapExactInToETH This function allows the user to borrow a specified amount of input tokens (tokenIn) and swap them to receive Ether. Parameters: interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. params (StandaloneExactInputUniswapParams calldata): A struct containing parameters for the borrow and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be borrowed and swapped. amountOutMinimum (uint256): The minimum amount of Ether that must be received. Returns: uint256: The amount of Ether received from the swap. Function: borrowAndSwapExactOut This function allows the user to borrow input tokens (tokenIn) and swap them to receive a specified amount of output tokens (tokenOut). Parameters: params (MarginSwapParamsMultiExactOut memory): A struct containing parameters for the borrow and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be borrowed. Returns: uint256: The amount of input tokens borrowed for the swap. Function: borrowAndSwapExactOutToETH This function allows the user to borrow input tokens (tokenIn) and swap them to receive a specified amount of Ether. Parameters: params (MarginSwapParamsMultiExactOut calldata): A struct containing parameters for the borrow and swap operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of Ether to be received. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be borrowed. Returns: uint256: The amount of input tokens borrowed for the swap. Repay Allows the user to repay borrow balances with a lender with any currency. Function: swapAndRepayExactIn This function allows the user to swap a specified amount of input tokens (tokenIn) and repay a debt in the lending protocol. Parameters: interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. params (ExactInputMultiParams calldata): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be swapped. Returns: uint256: The amount of output tokens repaid to the lending protocol. Function: swapETHAndRepayExactIn This function allows the user to swap a specified amount of Ether and repay a debt in the lending protocol. Parameters: interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. params (ExactInputMultiParams calldata): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of Ether to be swapped. Returns: uint256: The amount of output tokens repaid to the lending protocol. Function: swapAndRepayExactOut This function allows the user to swap input tokens (tokenIn) to repay a specified amount of output tokens (tokenOut) to the lending protocol. Parameters: params (MarginSwapParamsMultiExactOut memory): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be repaid. interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens swapped for the repayment. Function: swapETHAndRepayExactOut This function allows the user to swap Ether to repay a specified amount of output tokens (tokenOut) to the lending protocol. Parameters: interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. params (ExactOutputMultiParams calldata): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be repaid. Returns: uint256: The amount of Ether swapped for the repayment. Functions repaying the full loan Repaying with these will not left any borrow dust. Function: swapAndRepayAllOut This function allows the user to swap input tokens (tokenIn) to repay their entire debt balance of output tokens (tokenOut) in the lending protocol. Parameters: params (AllOutputMultiParamsBase calldata): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens swapped for the repayment. Function: swapETHAndRepayAllOut This function allows the user to swap Ether to repay their entire debt balance of output tokens (tokenOut) in the lending protocol. Parameters: params (AllOutputMultiParamsBase calldata): A struct containing parameters for the swap and repay operation. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The interest rate mode (stable or variable) for the repayment. amountInMaximum (uint256): The maximum amount of Ether allowed to be swapped. Returns: uint256: The amount of Ether swapped for the repayment. © 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-08 16:41:45 "},{"url":"api/borrow-swap.html","title":"Borrow Swap","level":"1.6.2","keywords":[],"body":"Borrow Swap Functions Allows swapping loan positions with a lender. Prequisites For the brokerage smart contract, the user has to approve borrow delegation first. With abstract accounts, no additinal action is required. Functions and parameters Function: swapBorrowExactIn This function allows a user to execute a swap on Uniswap V3 to borrow an exact amount of tokens in a single-pool trade, adjusting for the interest rate mode. Parameters: params (ExactInputSingleParamsBase memory): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountIn (uint256): The exact amount of input tokens to be swapped. Returns: uint256: The amount of output tokens received from the swap. Function: swapBorrowExactInMulti This function allows a user to execute a swap on Uniswap V3 to borrow an exact amount of tokens in a multi-pool trade, adjusting for the interest rate mode. Parameters: params (ExactInputMultiParams memory): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountIn (uint256): The exact amount of input tokens to be swapped. amountOutMinimum (uint256): The minimum amount of output tokens expected to be received from the swap. If the output is lower, the transaction will revert. Returns: uint256: The amount of output tokens received from the swap. Function: swapBorrowExactOut This function allows a user to execute a swap on Uniswap V3 to borrow an exact amount of tokens in a single-pool trade while specifying the maximum amount of input tokens, adjusting for the interest rate mode. Parameters: params (ExactOutputSingleParamsBase memory): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountOut (uint256): The exact amount of output tokens expected to be received from the swap. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap. Function: swapBorrowExactOutMulti This function allows a user to execute a swap on Uniswap V3 to borrow an exact amount of tokens in a multi-pool trade while specifying the maximum amount of input tokens, adjusting for the interest rate mode. Parameters: params (ExactOutputMultiParams memory): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountOut (uint256): The exact amount of output tokens expected to be received from the swap. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap. Function: swapBorrowAllOut This function allows a user to execute a swap on Uniswap V3 to borrow the full amount of tokens required to repay a debt in a single-pool trade while specifying the maximum amount of input tokens, adjusting for the interest rate mode. Parameters: params (MarginSwapParamsAllOut calldata): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap. Function: swapBorrowAllOutMulti This function allows a user to execute a swap on Uniswap V3 to borrow the full amount of tokens required to repay a debt in a multi-pool trade while specifying the maximum amount of input tokens, adjusting for the interest rate mode. Parameters: params (AllOutputMultiParamsBase calldata): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The encoded interest rate mode, where the first digit represents the \"from\" interest rate and the second digit represents the \"to\" interest rate. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-08 16:22:57 "},{"url":"api/collateral-swap.html","title":"Collateral Swap","level":"1.6.3","keywords":[],"body":"Collateral Swap Functions Function: swapCollateralExactIn This function allows a user to swap collateral from one token (tokenIn) to another (tokenOut) in a single-pool trade, specifying the exact input amount. Parameters: params (ExactInputCollateralSingleParamsBase memory): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. amountIn (uint256): The exact amount of input tokens to be swapped. Returns: uint256: The amount of output tokens received from the swap. Function: swapCollateralExactInMulti This function allows a user to swap collateral from one token (tokenIn) to another (tokenOut) in a multi-pool trade, specifying the exact input amount. Parameters: params (ExactInputCollateralMultiParams memory): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The exact amount of input tokens to be swapped. Returns: uint256: The amount of output tokens received from the swap. Function: swapCollateralExactOut This function allows a user to swap collateral from one token (tokenIn) to another (tokenOut) in a single-pool trade, specifying the exact output amount. Parameters: params (ExactOutputCollateralSingleParamsBase memory): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. amountOut (uint256): The exact amount of output tokens to be received. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap. Function: swapCollateralExactOutMulti This function allows a user to swap collateral from one token (tokenIn) to another (tokenOut) in a multi-pool trade, specifying the exact output amount. Parameters: params (ExactOutputCollateralMultiParams memory): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The exact amount of output tokens to be received. amountInMaximum (uint256): The maximum amount of input tokens allowed to be swapped. Returns: uint256: The amount of input tokens used in the swap. Function: swapCollateralAllIn This function allows a user to swap all the collateral from one token (tokenIn) to another (tokenOut) in a single-pool trade. Parameters: params (AllInputSingleParamsBase calldata): A struct containing parameters for the single-pool trade. tokenIn (address): The address of the input token. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token. amountOutMinimum (uint256): The minimum amount of output tokens allowed to be received. Returns: uint256: The amount of output tokens received from the swap. Function: swapCollateralAllInMulti This function allows a user to swap all the collateral from one token (tokenIn) to another (tokenOut) in a multi-pool trade. Parameters: params (AllInputCollateralMultiParamsBase calldata): A struct containing parameters for the multi-pool trade. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOutMinimum (uint256): The minimum amount of output tokens allowed to be received. Returns: uint256: The amount of output tokens received from the swap.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-08 15:10:54 "},{"url":"api/margin-open.html","title":"Open Margin Position","level":"1.6.4","keywords":[],"body":"Open Margin Position Allows opening a margin positions using a lender. Prequisites Supports single-pool swaps and multi-hop swaps. In this case, tokenIn and tokenOut are provided together with the fee parameter to identify the swap pool. In case of a multi-hop swaps, the swap-path is provided as encoded bytes. Functions Function: openMarginPositionExactIn This function allows a user to open a margin position by borrowing a token (tokenIn) and selling it against collateral (tokenOut). The user provides the debt amount as input. Parameters: params (MarginSwapParamsExactIn memory): A struct containing parameters for opening the margin position. tokenIn (address): The address of the input token to borrow. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token (collateral). amountIn (uint256): The amount of input tokens to borrow. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of output tokens (collateral) allowed to be received. Returns: uint256: The amount of output tokens (collateral) received from the swap. Function: openMarginPositionExactOut This function allows a user to open a margin position by borrowing a token (tokenIn) and selling it against collateral (tokenOut). The user provides the collateral amount as input. Parameters: params (MarginSwapParamsExactOut memory): A struct containing parameters for opening the margin position. tokenIn (address): The address of the input token to borrow. fee (uint24): The fee tier of the pool to be used for the swap. tokenOut (address): The address of the output token (collateral). amountOut (uint256): The amount of output tokens (collateral) to receive. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be borrowed. Returns: uint256: The amount of input tokens (borrowed) used for the swap. Function: openMarginPositionExactInMulti This function allows a user to open a margin position by borrowing a token (tokenIn) and selling it against collateral (tokenOut) using a multi-pool path. The user provides the debt amount as input. Parameters: params (MarginSwapParamsMultiExactIn memory): A struct containing parameters for opening the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The amount of input tokens to borrow. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of output tokens (collateral) allowed to be received. Returns: uint256: The amount of output tokens (collateral) received from the swap. Function: openMarginPositionExactOutMulti This function allows a user to open a margin position by borrowing a token (tokenIn) and selling it against collateral (tokenOut) using a multi-pool path. The user provides the collateral amount as input. Parameters: params (MarginSwapParamsMultiExactOut memory): A struct containing parameters for opening the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The amount of output tokens (collateral) to receive. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of input tokens allowed to be borrowed. Returns: uint256: The amount of input tokens (borrowed) used for the swap.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-08 16:52:46 "},{"url":"api/margin-close.html","title":"Close Margin Position","level":"1.6.5","keywords":[],"body":"Close Margin Position Allows users to close a borrow position with collateral. Prequisites Supports single-pool swaps and multi-hop swaps. In this case, tokenIn and tokenOut are provided together with the fee parameter to identify the swap pool. In case of a multi-hop swaps, the swap-path is provided as encoded bytes. Functions Function: trimMarginPositionExactIn This function allows the user to decrease their margin position by using collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut). The user provides the amount of collateral to be used as input. Parameters: params (MarginSwapParamsExactIn memory): A struct containing parameters for decreasing the margin position. tokenIn (address): The address of the collateral token. tokenOut (address): The address of the borrowed token. fee (uint24): The Uniswap pool fee. amountIn (uint256): The amount of collateral tokens to use. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of borrowed tokens to be repaid. Returns: uint256: The amount of borrowed tokens repaid. Function: trimMarginPositionExactOut This function allows the user to decrease their margin position by using collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut). The user provides the amount of borrowed tokens to be repaid as input. Parameters: params (MarginSwapParamsExactOut memory): A struct containing parameters for decreasing the margin position. tokenIn (address): The address of the collateral token. tokenOut (address): The address of the borrowed token. fee (uint24): The Uniswap pool fee. amountOut (uint256): The amount of borrowed tokens to be repaid. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of collateral tokens allowed to be used. Returns: uint256: The amount of collateral tokens used for the swap. Function: trimMarginPositionExactInMulti This function allows the user to decrease their margin position by using collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut) using a multi-pool path. The user provides the amount of collateral to be used as input. Parameters: params (MarginSwapParamsMultiExactIn memory): A struct containing parameters for decreasing the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountIn (uint256): The amount of collateral tokens to use. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of borrowed tokens to be repaid. Returns: uint256: The amount of borrowed tokens repaid. Function: trimMarginPositionExactOutMulti This function allows the user to decrease their margin position by using collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut) using a multi-pool path. The user provides the amount of borrowed tokens to be repaid as input. Parameters: params (MarginSwapParamsMultiExactOut memory): A struct containing parameters for decreasing the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. amountOut (uint256): The amount of borrowed tokens to be repaid. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of collateral tokens allowed to be used. Returns: uint256: The amount of collateral tokens used for the swap. Functions to repay the full loan or withdraw the full position The following functions allow a dust-free repayment of loans or withdrawal from a collateral position. Function: trimMarginPositionAllIn This function allows the user to decrease their margin position by using all available collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut). Parameters: params (MarginSwapParamsAllIn calldata): A struct containing parameters for decreasing the margin position. tokenIn (address): The address of the collateral token. tokenOut (address): The address of the borrowed token. fee (uint24): The Uniswap pool fee. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of borrowed tokens to be repaid. Returns: uint256: The amount of borrowed tokens repaid. Function: trimMarginPositionAllOut This function allows the user to decrease their margin position by using collateral (tokenIn) to repay all of their borrowed tokens (tokenOut). Parameters: params (MarginSwapParamsAllOut calldata): A struct containing parameters for decreasing the margin position. tokenIn (address): The address of the collateral token. tokenOut (address): The address of the borrowed token. fee (uint24): The Uniswap pool fee. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of collateral tokens allowed to be used. Returns: uint256: The amount of collateral tokens used for the swap. Function: trimMarginPositionAllInMulti This function allows the user to decrease their margin position by using all available collateral (tokenIn) to repay a portion of their borrowed tokens (tokenOut) using a multi-pool path. Parameters: params (AllInputMultiParamsBase calldata): A struct containing parameters for decreasing the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountOutMinimum (uint256): The minimum amount of borrowed tokens to be repaid. Returns: uint256: The amount of borrowed tokens repaid. Function: trimMarginPositionAllOutMulti This function allows the user to decrease their margin position by using collateral (tokenIn) to repay all of their borrowed tokens (tokenOut) using a multi-pool path. Parameters: params (AllOutputMultiParamsBase calldata): A struct containing parameters for decreasing the margin position. path (bytes): A byte-encoded representation of the tokenIn, tokenOut, and fee of each pool to be used in the trade. interestRateMode (uint256): The interest rate mode (stable or variable) for the borrowed tokens. amountInMaximum (uint256): The maximum amount of collateral tokens allowed to be used. Returns: uint256: The amount of collateral tokens used for the swap.© 1delta https://1delta.io/Found an error in the docs? The source code can be found here. Please feel free to edit and contribute a merge requestModified at: 2023-04-08 16:54:33 "}]